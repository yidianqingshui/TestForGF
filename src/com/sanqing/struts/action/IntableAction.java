/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.sanqing.struts.action;

import java.awt.Window;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import HibernateDao.Employee;
import HibernateDao.Intable;
import HibernateDao.IntableId;
import HibernateDao.Itemgeneral;
import HibernateDao.ItemgeneralDAO;

import com.sanqing.struts.form.IntableForm;

public class IntableAction extends Action {
	/*
	 * Generated Methods
	 */

	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession addsession=   request.getSession();
		IntableForm IntableForm = (IntableForm) form;
		HibernateDao.IntableId id =new IntableId(IntableForm.getWarehouseWarrant(), IntableForm.getItemId());
		try{
			PrintWriter out = response.getWriter();
			try{
			  String oper = request.getParameter("oper");
			  System.out.println("前台操作标志"+oper);
				com.sanqing.bll.Bintable B_V = new com.sanqing.bll.Bintable();
				com.sanqing.bll.BItemGeneral item_B_V = new com.sanqing.bll.BItemGeneral();
				//把一个物料信息存放到session里面if
				 if(oper.equals("add_to_intable")){
					 String name ="intable";
					String addid=String.valueOf(IntableForm.getItemId());
					System.out.println(addid);	
					addsession.setAttribute(name+addid, IntableForm);//把物料信息先放到session里面			
					out.print(B_V.ItemsaddToHTMLTable(IntableForm));
				  }	
				 else if((oper).equals("clearitem"))
				 {
					 String name ="intable";
					 String itid =request.getParameter("itemId");
					 addsession.removeAttribute(name+itid);
					 //删除完之后还要把剩下的数据打印出来
					 Enumeration   e =	request.getSession().getAttributeNames();
						while(e.hasMoreElements())
						{
							String sessionName=(String)e.nextElement().toString();   
							if(sessionName.indexOf(name)!=-1){  
								Object session_ab=addsession.getAttribute(sessionName);	
								IntableForm  add_IntableForm =	(com.sanqing.struts.form.IntableForm) session_ab;	
								out.print(B_V.ItemsaddToHTMLTable(add_IntableForm));
							}
						}
				 }
				 else if((oper).equals("add"))
				{
					Enumeration   e =	request.getSession().getAttributeNames();
					 String name ="intable";
					while(e.hasMoreElements())
					{			
						String sessionName=(String)e.nextElement().toString();             
						if(sessionName.indexOf(name)!=-1){  
							Object session_ab=addsession.getAttribute(sessionName);		
							HibernateDao.Intable TypeModel = new HibernateDao.Intable();	
							HibernateDao.IntableId TypeModel_id =new IntableId();
						IntableForm  add_IntableForm =	(com.sanqing.struts.form.IntableForm) session_ab;	
							/*TypeModel.setWarehouseWarrant(add_IntableForm.getWarehouseWarrant());*/
							TypeModel.setClasscode(new HibernateDao.ClasscodeDAO().findById(add_IntableForm.getProdCode()));
							TypeModel.setEmployeeByPoEmpId(new HibernateDao.EmployeeDAO().findById(add_IntableForm.getPoEmpId()));				
							TypeModel.setItemDesc(add_IntableForm.getItemDesc());
							TypeModel_id.setItemId(add_IntableForm.getItemId());
							TypeModel_id.setWarehouseWarrant(add_IntableForm.getWarehouseWarrant());
							TypeModel.setId(TypeModel_id);
							TypeModel.setSalePic( add_IntableForm.getSalePic());
							TypeModel.setWarehouseBywareid(new HibernateDao.WarehouseDAO().findById(add_IntableForm.getWareId()));
							TypeModel.setLocationBylocationid(new HibernateDao.LocationDAO().findById(add_IntableForm.getLocaId()));
							TypeModel.setVendermasterByvendid(new HibernateDao.VendermasterDAO().findById(add_IntableForm.getVendId()));
							//String与date之间的转换
							SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
							java.util.Date date=sdf.parse(add_IntableForm.getIndate());
							TypeModel.setIndate(date);	
							TypeModel.setNumber(add_IntableForm.getNumber());
							HibernateDao.ItemgeneralDAO  ItemgeneralDAO=new HibernateDao.ItemgeneralDAO();
							Itemgeneral   instance=	ItemgeneralDAO.findById(String.valueOf(add_IntableForm.getItemId()));
							Integer	instance_number=	instance.getNumber();
							instance.setNumber(add_IntableForm.getNumber()+instance_number);
							B_V.Item_Add(TypeModel);		
						}
					}
					out.print(B_V.ItemsConvertToHTMLTable());				
				}
				else if(oper.equals("edit"))
				{
					HibernateDao.Intable TypeModel = new HibernateDao.Intable();
					TypeModel.setClasscode(new HibernateDao.ClasscodeDAO().findById(IntableForm.getProdCode()));
					//TypeModel.setColor(itemeditorForm.getColor());
					TypeModel.setEmployeeByPoEmpId(new HibernateDao.EmployeeDAO().findById(IntableForm.getPoEmpId()));
					TypeModel.setItemDesc(IntableForm.getItemDesc());
				/*	TypeModel.setItemId(new HibernateDao.ItemgeneralDAO().findById(String.valueOf(IntableForm.getItemId())));*/
					TypeModel.setSalePic(IntableForm.getSalePic());
					TypeModel.setWarehouseBywareid(new HibernateDao.WarehouseDAO().findById(IntableForm.getWareId()));
					TypeModel.setLocationBylocationid(new HibernateDao.LocationDAO().findById(IntableForm.getLocaId()));
				     String v=IntableForm.getVendId();
					TypeModel.setVendermasterByvendid(new HibernateDao.VendermasterDAO().findById(v));
					//先获取库存里面的数量
					HibernateDao.ItemgeneralDAO D_ITEM = new HibernateDao.ItemgeneralDAO();
					Itemgeneral MyType = D_ITEM.findById(String.valueOf(IntableForm.getItemId()));
					Integer StorsgeValue= MyType.getNumber();//数据库库存为StorsgeValue
					System.out.println("库存"+StorsgeValue);				
				    TypeModel.setNumber(IntableForm.getNumber());
					//入库的数量为IntableForm.getNumber()
					System.out.println("入库量："+IntableForm.getNumber());
					HibernateDao.Itemgeneral item_TypeModel = new HibernateDao.Itemgeneral();
					item_TypeModel.setNumber(StorsgeValue+IntableForm.getNumber());
				/*	TypeModel.setWarehouseWarrant(IntableForm.getWarehouseWarrant());*/
					TypeModel.setId(id);
					B_V.Item_Edit(TypeModel);
				}
				else if(oper.equals("lookup")){
					HibernateDao.Intable Intable=new HibernateDao.Intable();
					com.sanqing.bll.Bintable Bintable =new com.sanqing.bll.Bintable();
			
					int warehouseWarrant=Integer.parseInt(request.getParameter("warehouseWarrant"));
				   if (Bintable.find_warehouseWarrant(id)) {
						out.print(B_V.Item_ConvertModelToJson(id));			
					}	
					else{
						out.print("flase");		
					}
					
					return null;
				}
			
				else if(oper.equals("select")){
					//建立物料的实体类
					out.print(B_V.Item_SelectModelToJson(request.getParameter("itemId")));
				}
				else if(oper.equals("delete"))
				{
					HibernateDao.IntableId intable_id =new IntableId(Integer.parseInt(request.getParameter("warehouseWarrant")), Integer.parseInt(request.getParameter("itemId")));
					B_V.Item_Delete(intable_id);		
					out.print(B_V.ItemsConvertToHTMLTable());	
				}
				else if(oper.equals("model"))
				{
					HibernateDao.IntableId intable_id =new IntableId(Integer.parseInt(request.getParameter("warehouseWarrant")), Integer.parseInt(request.getParameter("itemId")));
					out.print(B_V.Item_ConvertModelToJson(intable_id));
					return null;
				}
				else{
					
				out.print(B_V.ItemsConvertToHTMLTable());	
				}
			}catch(Exception e){
				out.print(e.getMessage());
			}
		}
		catch(IOException e1){
			e1.printStackTrace();
		}
		return null;
	}
}